#################################
## Basically for our components
#################################

Welcome..

At the end of the last lesson we discussed the importance of incorporating accessibility into your first round of developement. I cannot stress enough: Accessibility is not a secondary task that you come back to after your app is working. It is a primary concern that needs to be addressed as part of your development process.

In this course I decided to keep it separate for educational reasons, introducing one concept at a time and building upon those concepts incrementally. We now have the conceptual groundwork laid out to add in our accessibility features. 

We will go over what I consider some of the very basic accessibility concepts that you need to keep fresh in mind when developing forms. These concepts are not technically Vue-specific, but we will learn how to apply them in the context of our view form components.

Lets dive right in.

########################
### Appropriate Types
########################

In HTML we have a wide variety of input elements to craft our forms, but one element in particular rules them all. The catch-all input allows us the flexibility of creating text inputs, but we can also transform it into checkboxes and radio buttons with the type property. 


A common mistake is to ignore this type property when creating text inputs. Most of us know and commonly use two regularly:
* email
* password

When using a specific type in an input element, not only we get better autocompletion for our form, but it also allows screen readers to better understand what type of data we want to retreive from the user. A type of tel for example, will provide a user on the mobile phone with a handly numeric keyboard with phone symbols like + * #.

Your users with mobility problems will definitely be grateful for this one!

Bottom line: Don't forget to set your type, even when the input is not of type password or email.

Here is a list of the available types for an input element:

* button
* checkbox
* color
* date
* datetime-local
* email
* file
* hidden
* image
* month
* number
* password
* radio
* range
* reset
* search
* submit
* tel
* text
* time
* url
* week



#############################
## Use Fieldset and Legend
#############################

Two often overlooked or under-taught elements in HTMl are fieldset and legend.

In forms, usually we group our inputs logically. For example, you would usually code your forms to first ask the user for their personal data like:
* Name
* Last Name
* Phone

Later on, another section may ask them for a shipping address.

For accessible users, this information may not be as immediately available without having to tab through the whole form. This is where <fieldset> and <legend> comes to play.










